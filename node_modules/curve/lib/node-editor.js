(function() {
  var CompositeDisposable, Delegator, Emitter, NodeEditor, Point, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('event-kit'), CompositeDisposable = ref.CompositeDisposable, Emitter = ref.Emitter;

  Delegator = require('delegato');

  Point = require('./point');

  module.exports = NodeEditor = (function() {
    var handleElements, lineElement, node, nodeElement;

    Delegator.includeInto(NodeEditor);

    NodeEditor.delegatesMethods('on', {
      toProperty: 'emitter'
    });

    NodeEditor.prototype.nodeSize = 5;

    NodeEditor.prototype.handleSize = 3;

    node = null;

    nodeElement = null;

    handleElements = null;

    lineElement = null;

    function NodeEditor(svgDocument, pathEditor) {
      this.svgDocument = svgDocument;
      this.pathEditor = pathEditor;
      this.onDraggingHandleOut = bind(this.onDraggingHandleOut, this);
      this.onDraggingHandleIn = bind(this.onDraggingHandleIn, this);
      this.onDraggingNode = bind(this.onDraggingNode, this);
      this.render = bind(this.render, this);
      this.emitter = new Emitter;
      this.toolLayer = this.svgDocument.getToolLayer();
      this._setupNodeElement();
      this._setupLineElement();
      this._setupHandleElements();
      this.hide();
    }

    NodeEditor.prototype.hide = function() {
      this.visible = false;
      this.lineElement.hide();
      this.nodeElement.hide();
      return this.handleElements.hide();
    };

    NodeEditor.prototype.show = function(toFront) {
      this.visible = true;
      this.nodeElement.show();
      if (toFront) {
        this.lineElement.front();
        this.nodeElement.front();
        this.handleElements.front();
      }
      if (this.enableHandles) {
        this.lineElement.show();
        return this.handleElements.show();
      } else {
        this.lineElement.hide();
        return this.handleElements.hide();
      }
    };

    NodeEditor.prototype.setEnableHandles = function(enableHandles) {
      this.enableHandles = enableHandles;
      if (this.visible) {
        return this.show();
      }
    };

    NodeEditor.prototype.setNode = function(node) {
      this._unbindNode();
      this.node = node;
      this._bindNode(this.node);
      this.setEnableHandles(false);
      return this.render();
    };

    NodeEditor.prototype.render = function() {
      var handleIn, handleOut, linePath, point;
      if (!this.node) {
        return this.hide();
      }
      handleIn = this.node.getAbsoluteHandleIn();
      handleOut = this.node.getAbsoluteHandleOut();
      point = this.node.getPoint();
      linePath = "M" + handleIn.x + "," + handleIn.y + "L" + point.x + "," + point.y + "L" + handleOut.x + "," + handleOut.y;
      this.lineElement.attr({
        d: linePath
      });
      this.handleElements.members[0].attr({
        cx: handleIn.x,
        cy: handleIn.y,
        transform: ''
      });
      this.handleElements.members[1].attr({
        cx: handleOut.x,
        cy: handleOut.y,
        transform: ''
      });
      this.nodeElement.attr({
        cx: point.x,
        cy: point.y,
        transform: ''
      });
      this.show();
      if (this._draggingHandle) {
        return this._draggingHandle.front();
      }
    };

    NodeEditor.prototype.onDraggingNode = function(delta, event) {
      return this.node.setPoint(this._startPosition.add(delta));
    };

    NodeEditor.prototype.onDraggingHandleIn = function(delta, event) {
      return this.node.setAbsoluteHandleIn(this._startPosition.add(delta));
    };

    NodeEditor.prototype.onDraggingHandleOut = function(delta, event) {
      return this.node.setAbsoluteHandleOut(this._startPosition.add(delta));
    };

    NodeEditor.prototype._bindNode = function(node) {
      var ref1;
      if (!node) {
        return;
      }
      this.nodeSubscriptions = new CompositeDisposable;
      this.nodeSubscriptions.add(node.on('change', this.render));
      return this.nodeSubscriptions.add((ref1 = node.getPath()) != null ? ref1.on('change', this.render) : void 0);
    };

    NodeEditor.prototype._unbindNode = function() {
      var ref1;
      if ((ref1 = this.nodeSubscriptions) != null) {
        ref1.dispose();
      }
      return this.nodeSubscriptions = null;
    };

    NodeEditor.prototype._setupNodeElement = function() {
      this.nodeElement = this.toolLayer.circle(this.nodeSize);
      this.nodeElement.node.setAttribute('class', 'node-editor-node');
      this.nodeElement.mousedown((function(_this) {
        return function(e) {
          var defaultPrevented, preventDefault;
          e.stopPropagation();
          defaultPrevented = false;
          preventDefault = function() {
            return defaultPrevented = true;
          };
          _this.emitter.emit('mousedown:node', {
            node: _this.node,
            preventDefault: preventDefault,
            event: event
          });
          if (!defaultPrevented) {
            _this.svgDocument.getSelectionModel().setSelectedNode(_this.node);
          }
          return false;
        };
      })(this));
      this.nodeElement.draggable();
      this.nodeElement.dragmove = this.onDraggingNode;
      this.nodeElement.dragstart = (function(_this) {
        return function() {
          return _this._startPosition = _this.node.getPoint();
        };
      })(this);
      this.nodeElement.dragend = (function(_this) {
        return function() {
          return _this._startPosition = null;
        };
      })(this);
      this.nodeElement.on('mouseover', (function(_this) {
        return function() {
          _this.nodeElement.front();
          return _this.nodeElement.attr({
            'r': _this.nodeSize + 2
          });
        };
      })(this));
      return this.nodeElement.on('mouseout', (function(_this) {
        return function() {
          return _this.nodeElement.attr({
            'r': _this.nodeSize
          });
        };
      })(this));
    };

    NodeEditor.prototype._setupLineElement = function() {
      this.lineElement = this.toolLayer.path('');
      return this.lineElement.node.setAttribute('class', 'node-editor-lines');
    };

    NodeEditor.prototype._setupHandleElements = function() {
      var onStopDraggingHandle, self;
      self = this;
      this.handleElements = this.toolLayer.set();
      this.handleElements.add(this.toolLayer.circle(this.handleSize), this.toolLayer.circle(this.handleSize));
      this.handleElements.members[0].node.setAttribute('class', 'node-editor-handle');
      this.handleElements.members[1].node.setAttribute('class', 'node-editor-handle');
      this.handleElements.mousedown((function(_this) {
        return function(e) {
          e.stopPropagation();
          return false;
        };
      })(this));
      onStopDraggingHandle = (function(_this) {
        return function() {
          _this._draggingHandle = null;
          return _this._startPosition = null;
        };
      })(this);
      this.handleElements.members[0].draggable();
      this.handleElements.members[0].dragmove = this.onDraggingHandleIn;
      this.handleElements.members[0].dragend = onStopDraggingHandle;
      this.handleElements.members[0].dragstart = function() {
        self._draggingHandle = this;
        return self._startPosition = self.node.getAbsoluteHandleIn();
      };
      this.handleElements.members[1].draggable();
      this.handleElements.members[1].dragmove = this.onDraggingHandleOut;
      this.handleElements.members[1].dragend = onStopDraggingHandle;
      this.handleElements.members[1].dragstart = function() {
        self._draggingHandle = this;
        return self._startPosition = self.node.getAbsoluteHandleOut();
      };
      this.handleElements.on('mouseover', function() {
        this.front();
        return this.attr({
          'r': self.handleSize + 2
        });
      });
      return this.handleElements.on('mouseout', function() {
        return this.attr({
          'r': self.handleSize
        });
      });
    };

    return NodeEditor;

  })();

}).call(this);
