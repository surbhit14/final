(function() {
  var CompositeDisposable, ObjectEditor, PathEditor, ShapeEditor,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CompositeDisposable = require('event-kit').CompositeDisposable;

  PathEditor = require('./path-editor');

  ShapeEditor = require('./shape-editor');

  module.exports = ObjectEditor = (function() {
    function ObjectEditor(svgDocument) {
      var shapeEditor;
      this.svgDocument = svgDocument;
      this.activateSelectedNode = bind(this.activateSelectedNode, this);
      this.activateSelectedObject = bind(this.activateSelectedObject, this);
      this.active = false;
      this.activeEditor = null;
      this.selectionModel = this.svgDocument.getSelectionModel();
      shapeEditor = new ShapeEditor(this.svgDocument);
      this.editors = {
        Path: new PathEditor(this.svgDocument),
        Ellipse: shapeEditor,
        Rectangle: shapeEditor
      };
    }

    ObjectEditor.prototype.isActive = function() {
      return this.active;
    };

    ObjectEditor.prototype.getActiveObject = function() {
      var ref, ref1;
      return (ref = (ref1 = this.activeEditor) != null ? ref1.getActiveObject() : void 0) != null ? ref : null;
    };

    ObjectEditor.prototype.getActiveEditor = function() {
      return this.activeEditor;
    };

    ObjectEditor.prototype.activate = function() {
      this.active = true;
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(this.selectionModel.on('change:selected', (function(_this) {
        return function(arg) {
          var object;
          object = arg.object;
          return _this.activateSelectedObject(object);
        };
      })(this)));
      this.subscriptions.add(this.selectionModel.on('change:selectedNode', (function(_this) {
        return function(arg) {
          var node;
          node = arg.node;
          return _this.activateSelectedNode(node);
        };
      })(this)));
      this.activateSelectedObject(this.selectionModel.getSelected());
      return this.activateSelectedNode(this.selectionModel.getSelectedNode());
    };

    ObjectEditor.prototype.deactivate = function() {
      var ref;
      if ((ref = this.subscriptions) != null) {
        ref.dispose();
      }
      this._deactivateActiveEditor();
      return this.active = false;
    };

    ObjectEditor.prototype.activateSelectedObject = function(object) {
      var ref;
      this._deactivateActiveEditor();
      if (object != null) {
        this.activeEditor = this.editors[object.getType()];
        return (ref = this.activeEditor) != null ? ref.activateObject(object) : void 0;
      }
    };

    ObjectEditor.prototype.activateSelectedNode = function(node) {
      var ref;
      return (ref = this.activeEditor) != null ? typeof ref.activateNode === "function" ? ref.activateNode(node) : void 0 : void 0;
    };

    ObjectEditor.prototype._deactivateActiveEditor = function() {
      var ref;
      if ((ref = this.activeEditor) != null) {
        ref.deactivate();
      }
      return this.activeEditor = null;
    };

    return ObjectEditor;

  })();

}).call(this);
