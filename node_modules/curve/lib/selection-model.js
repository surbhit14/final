(function() {
  var CompositeDisposable, Emitter, SelectionModel, ref,
    slice = [].slice;

  ref = require('event-kit'), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;

  module.exports = SelectionModel = (function() {
    function SelectionModel() {
      this.emitter = new Emitter;
      this.preselected = null;
      this.selected = null;
      this.selectedNode = null;
    }

    SelectionModel.prototype.on = function() {
      var args, ref1;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = this.emitter).on.apply(ref1, args);
    };

    SelectionModel.prototype.getPreselected = function() {
      return this.preselected;
    };

    SelectionModel.prototype.setPreselected = function(preselected) {
      var old;
      if (preselected === this.preselected) {
        return;
      }
      if (preselected && preselected === this.selected) {
        return;
      }
      old = this.preselected;
      this.preselected = preselected;
      return this.emitter.emit('change:preselected', {
        object: this.preselected,
        old: old
      });
    };

    SelectionModel.prototype.getSelected = function() {
      return this.selected;
    };

    SelectionModel.prototype.setSelected = function(selected) {
      var old, ref1, ref2, ref3;
      if (selected === this.selected) {
        return;
      }
      old = this.selected;
      this.selected = selected;
      if ((ref1 = this.selectedSubscriptions) != null) {
        ref1.dispose();
      }
      this.selectedSubscriptions = null;
      if (this.selected != null) {
        this.selectedSubscriptions = new CompositeDisposable;
        this.selectedSubscriptions.add((ref2 = this.selected) != null ? typeof ref2.on === "function" ? ref2.on('remove', (function(_this) {
          return function() {
            return _this.setSelected(null);
          };
        })(this)) : void 0 : void 0);
        this.selectedSubscriptions.add((ref3 = this.selected) != null ? typeof ref3.on === "function" ? ref3.on('remove:node', (function(_this) {
          return function(arg) {
            var node;
            node = arg.node;
            if (node === _this.selectedNode) {
              return _this.setSelectedNode(null);
            }
          };
        })(this)) : void 0 : void 0);
      }
      if (this.preselected === selected) {
        this.setPreselected(null);
      }
      return this.emitter.emit('change:selected', {
        object: this.selected,
        old: old
      });
    };

    SelectionModel.prototype.getSelectedNode = function() {
      return this.selectedNode;
    };

    SelectionModel.prototype.setSelectedNode = function(selectedNode) {
      var old;
      if (selectedNode === this.selectedNode) {
        return;
      }
      old = this.selectedNode;
      this.selectedNode = selectedNode;
      return this.emitter.emit('change:selectedNode', {
        node: this.selectedNode,
        old: old
      });
    };

    SelectionModel.prototype.clearSelected = function() {
      return this.setSelected(null);
    };

    SelectionModel.prototype.clearPreselected = function() {
      return this.setPreselected(null);
    };

    SelectionModel.prototype.clearSelectedNode = function() {
      return this.setSelectedNode(null);
    };

    return SelectionModel;

  })();

}).call(this);
