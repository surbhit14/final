(function() {
  var Emitter, Node, Point,
    slice = [].slice;

  Emitter = require('event-kit').Emitter;

  Point = require('./point');

  module.exports = Node = (function() {
    function Node(point, handleIn, handleOut, isJoined) {
      this.isJoined = isJoined != null ? isJoined : false;
      this.emitter = new Emitter;
      this.setPoint(point);
      if (handleIn) {
        this.setHandleIn(handleIn);
      }
      if (handleOut) {
        this.setHandleOut(handleOut);
      }
    }

    Node.prototype.toString = function() {
      return "(" + (this.getPoint()) + ", " + (this.getHandleIn()) + ", " + (this.getHandleOut()) + ")";
    };

    Node.prototype.on = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.emitter).on.apply(ref, args);
    };

    Node.prototype.join = function(referenceHandle) {
      if (referenceHandle == null) {
        referenceHandle = 'handleIn';
      }
      this.isJoined = true;
      return this["set" + (referenceHandle.replace('h', 'H'))](this[referenceHandle]);
    };

    Node.prototype.setPath = function(path) {
      this.path = path;
    };

    Node.prototype.getPath = function() {
      return this.path;
    };

    Node.prototype.getPoint = function() {
      return this._transformPoint(this.point);
    };

    Node.prototype.getHandleIn = function() {
      return this.handleIn;
    };

    Node.prototype.getHandleOut = function() {
      return this.handleOut;
    };

    Node.prototype.getAbsoluteHandleIn = function() {
      if (this.handleIn) {
        return this._transformPoint(this.point.add(this.handleIn));
      } else {
        return this.getPoint();
      }
    };

    Node.prototype.getAbsoluteHandleOut = function() {
      if (this.handleOut) {
        return this._transformPoint(this.point.add(this.handleOut));
      } else {
        return this.getPoint();
      }
    };

    Node.prototype.setAbsoluteHandleIn = function(point) {
      return this.setHandleIn(Point.create(point).subtract(this.point));
    };

    Node.prototype.setAbsoluteHandleOut = function(point) {
      return this.setHandleOut(Point.create(point).subtract(this.point));
    };

    Node.prototype.setPoint = function(point) {
      return this.set('point', Point.create(point));
    };

    Node.prototype.setHandleIn = function(point) {
      if (point) {
        point = Point.create(point);
      }
      this.set('handleIn', point);
      if (this.isJoined) {
        return this.set('handleOut', point ? new Point(0, 0).subtract(point) : point);
      }
    };

    Node.prototype.setHandleOut = function(point) {
      if (point) {
        point = Point.create(point);
      }
      this.set('handleOut', point);
      if (this.isJoined) {
        return this.set('handleIn', point ? new Point(0, 0).subtract(point) : point);
      }
    };

    Node.prototype.computeIsjoined = function() {
      return this.isJoined = (!this.handleIn && !this.handleOut) || (this.handleIn && this.handleOut && Math.round(this.handleIn.x) === Math.round(-this.handleOut.x) && Math.round(this.handleIn.y) === Math.round(-this.handleOut.y));
    };

    Node.prototype.set = function(attribute, value) {
      var event, eventArgs, old;
      old = this[attribute];
      this[attribute] = value;
      event = "change:" + attribute;
      eventArgs = {
        node: this,
        event: event,
        value: value,
        old: old
      };
      this.emitter.emit(event, eventArgs);
      return this.emitter.emit('change', eventArgs);
    };

    Node.prototype.translate = function(point) {
      point = Point.create(point);
      return this.set('point', this.point.add(point));
    };

    Node.prototype._transformPoint = function(point) {
      var ref, transform;
      transform = (ref = this.path) != null ? ref.getTransform() : void 0;
      if (transform != null) {
        point = transform.transformPoint(point);
      }
      return point;
    };

    return Node;

  })();

}).call(this);
