(function() {
  var Point, Rectangle, ShapeTool, Size, getCanvasPosition, getPositivePositionAndSize,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Point = require('./point');

  Size = require('./size');

  Rectangle = require('./rectangle');

  module.exports = ShapeTool = (function() {
    function ShapeTool(svgDocument1, arg) {
      var ref;
      this.svgDocument = svgDocument1;
      ref = arg != null ? arg : {}, this.selectionModel = ref.selectionModel, this.selectionView = ref.selectionView, this.toolLayer = ref.toolLayer;
      this.onMouseUp = bind(this.onMouseUp, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onMouseDown = bind(this.onMouseDown, this);
    }

    ShapeTool.prototype.activate = function() {
      this.svgDocument.on('mousedown', this.onMouseDown);
      this.svgDocument.on('mousemove', this.onMouseMove);
      return this.svgDocument.on('mouseup', this.onMouseUp);
    };

    ShapeTool.prototype.deactivate = function() {
      this.svgDocument.off('mousedown', this.onMouseDown);
      this.svgDocument.off('mousemove', this.onMouseMove);
      return this.svgDocument.off('mouseup', this.onMouseUp);
    };

    ShapeTool.prototype.onMouseDown = function(event) {
      this.anchor = getCanvasPosition(this.svgDocument, event);
      this.rectangle = new Rectangle(this.svgDocument, {
        x: this.anchor.x,
        y: this.anchor.y,
        width: 0,
        height: 0
      });
      this.selectionModel.setSelected(this.rectangle);
      return true;
    };

    ShapeTool.prototype.onMouseMove = function(event) {
      var point, position, ref, size;
      if (this.rectangle == null) {
        return;
      }
      point = getCanvasPosition(this.svgDocument, event);
      ref = getPositivePositionAndSize(this.anchor, point), size = ref.size, position = ref.position;
      this.rectangle.setPosition(position);
      return this.rectangle.setSize(size);
    };

    ShapeTool.prototype.onMouseUp = function(event) {
      this.anchor = null;
      return this.rectangle = null;
    };

    return ShapeTool;

  })();

  getPositivePositionAndSize = function(anchor, point) {
    var bottomRight, diff, topLeft;
    topLeft = new Point(Math.min(anchor.x, point.x), Math.min(anchor.y, point.y));
    bottomRight = new Point(Math.max(anchor.x, point.x), Math.max(anchor.y, point.y));
    diff = bottomRight.subtract(topLeft);
    return {
      position: topLeft,
      size: new Size(diff.x, diff.y)
    };
  };

  getCanvasPosition = function(svgDocument, event) {
    var x, y;
    x = event.pageX - svgDocument.node.offsetLeft;
    y = event.pageY - svgDocument.node.offsetTop;
    return new Point(x, y);
  };

}).call(this);
