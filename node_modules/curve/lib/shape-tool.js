(function() {
  var Ellipse, Emitter, Point, Rectangle, ShapeTool, Size, getCanvasPosition, normalizePositionAndSize, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  Emitter = require('event-kit').Emitter;

  Point = require('./point');

  Size = require('./size');

  Ellipse = require('./ellipse');

  Rectangle = require('./rectangle');

  ref = require('./utils'), getCanvasPosition = ref.getCanvasPosition, normalizePositionAndSize = ref.normalizePositionAndSize;

  module.exports = ShapeTool = (function() {
    function ShapeTool(svgDocument) {
      this.svgDocument = svgDocument;
      this.onMouseUp = bind(this.onMouseUp, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onMouseDown = bind(this.onMouseDown, this);
      this.emitter = new Emitter;
      this.selectionModel = this.svgDocument.getSelectionModel();
    }

    ShapeTool.prototype.on = function() {
      var args, ref1;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = this.emitter).on.apply(ref1, args);
    };

    ShapeTool.prototype.getType = function() {
      return this.shapeType;
    };

    ShapeTool.prototype.supportsType = function(type) {
      return type === 'shape' || type === 'rectangle' || type === 'ellipse';
    };

    ShapeTool.prototype.isActive = function() {
      return this.active;
    };

    ShapeTool.prototype.activate = function(shapeType) {
      var svg;
      this.shapeType = shapeType;
      if (this.shapeType == null) {
        this.shapeType = 'rectangle';
      }
      svg = this.svgDocument.getSVGRoot();
      svg.node.style.cursor = 'crosshair';
      svg.on('mousedown', this.onMouseDown);
      svg.on('mousemove', this.onMouseMove);
      svg.on('mouseup', this.onMouseUp);
      return this.active = true;
    };

    ShapeTool.prototype.deactivate = function() {
      var svg;
      svg = this.svgDocument.getSVGRoot();
      svg.node.style.cursor = null;
      svg.off('mousedown', this.onMouseDown);
      svg.off('mousemove', this.onMouseMove);
      svg.off('mouseup', this.onMouseUp);
      return this.active = false;
    };

    ShapeTool.prototype.createShape = function(params) {
      if (this.shapeType === 'rectangle') {
        return new Rectangle(this.svgDocument, params);
      } else if (this.shapeType === 'ellipse') {
        return new Ellipse(this.svgDocument, params);
      } else {
        return null;
      }
    };

    ShapeTool.prototype.onMouseDown = function(event) {
      this.anchor = getCanvasPosition(this.svgDocument.getSVGRoot(), event);
      return true;
    };

    ShapeTool.prototype.onMouseMove = function(event) {
      var point;
      if (this.anchor == null) {
        return;
      }
      point = getCanvasPosition(this.svgDocument.getSVGRoot(), event);
      if (!this.shape && (Math.abs(point.x - this.anchor.x) >= 5 || Math.abs(point.y - this.anchor.y) >= 5)) {
        this.shape = this.createShape({
          x: this.anchor.x,
          y: this.anchor.y,
          width: 0,
          height: 0
        });
        this.selectionModel.setSelected(this.shape);
      }
      if (this.shape) {
        return this.shape.set(normalizePositionAndSize(this.anchor, point, event.shiftKey));
      }
    };

    ShapeTool.prototype.onMouseUp = function(event) {
      this.anchor = null;
      if (this.shape != null) {
        return this.shape = null;
      } else {
        return this.emitter.emit('cancel');
      }
    };

    return ShapeTool;

  })();

}).call(this);
