(function() {
  var CompositeDisposable, Delegator, IDS, Model, Point, RectangleModel, Size, Transform,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CompositeDisposable = require('event-kit').CompositeDisposable;

  Delegator = require('delegato');

  Transform = require('./transform');

  Point = require('./point');

  Size = require('./size');

  Model = require('./model');

  IDS = 0;

  module.exports = RectangleModel = (function(superClass) {
    extend(RectangleModel, superClass);

    function RectangleModel() {
      RectangleModel.__super__.constructor.call(this, ['transform', 'position', 'size', 'fill']);
      this.id = IDS++;
      this.transform = new Transform;
      this.addFilter('size', (function(_this) {
        return function(value) {
          return Size.create(value);
        };
      })(this));
      this.addFilter('position', (function(_this) {
        return function(value) {
          return Point.create(value);
        };
      })(this));
      this.addFilter('transform', (function(_this) {
        return function(value) {
          if (value === 'matrix(1,0,0,1,0,0)') {
            return null;
          } else {
            return value;
          }
        };
      })(this));
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(this.on('change:transform', (function(_this) {
        return function(arg) {
          var value;
          value = arg.value;
          return _this.transform.setTransformString(value);
        };
      })(this)));
    }

    RectangleModel.prototype.destroy = function() {
      return this.subscriptions.dispose();
    };


    /*
    Section: Public Methods
     */

    RectangleModel.prototype.getType = function() {
      return 'Rectangle';
    };

    RectangleModel.prototype.getID = function() {
      return (this.getType()) + "-" + this.id;
    };

    RectangleModel.prototype.toString = function() {
      return "{Rect " + this.id + ": " + (this.get('position')) + " " + (this.get('size'));
    };


    /*
    Section: Position / Size Methods
     */

    RectangleModel.prototype.getTransform = function() {
      return this.transform;
    };

    RectangleModel.prototype.translate = function(point) {
      point = Point.create(point);
      return this.set({
        position: this.get('position').add(point)
      });
    };

    return RectangleModel;

  })(Model);

}).call(this);
