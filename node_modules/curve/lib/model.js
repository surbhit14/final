(function() {
  var CompositeDisposable, Delegator, Emitter, Model, ref;

  ref = require('event-kit'), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;

  Delegator = require('delegato');

  module.exports = Model = (function() {
    Delegator.includeInto(Model);

    Model.delegatesMethods('on', {
      toProperty: 'emitter'
    });

    function Model(allowedProperties) {
      var i, len, prop;
      this.emitter = new Emitter;
      this.filters = {};
      this.properties = {};
      for (i = 0, len = allowedProperties.length; i < len; i++) {
        prop = allowedProperties[i];
        this.properties[prop] = null;
      }
      return;
    }

    Model.prototype.get = function(property) {
      if (property != null) {
        return this.properties[property];
      } else {
        return this.properties;
      }
    };

    Model.prototype.set = function(properties, options) {
      var eventObject, propEventObject, property, value;
      if (!properties) {
        return;
      }
      eventObject = null;
      for (property in properties) {
        value = properties[property];
        if (!this.properties.hasOwnProperty(property)) {
          continue;
        }
        if (propEventObject = this._setProperty(property, value, options)) {
          if (eventObject == null) {
            eventObject = {
              model: this,
              oldValue: {},
              value: {}
            };
          }
          eventObject.oldValue[property] = propEventObject.oldValue;
          eventObject.value[property] = propEventObject.value;
        }
      }
      if (eventObject != null) {
        return this.emitter.emit('change', eventObject);
      }
    };

    Model.prototype.addFilter = function(property, filter) {
      return this.filters[property] = filter;
    };

    Model.prototype._setProperty = function(property, value, options) {
      var eventObject, oldValue;
      if (this.properties[property] === value) {
        return null;
      }
      if ((this.filters[property] != null) && ((options == null) || options.filter !== false)) {
        value = this.filters[property](value);
        if (this.properties[property] === value) {
          return null;
        }
      }
      oldValue = this.properties[property];
      this.properties[property] = value;
      eventObject = {
        model: this,
        oldValue: oldValue,
        value: value,
        property: property
      };
      this.emitter.emit("change:" + property, eventObject);
      return eventObject;
    };

    return Model;

  })();

}).call(this);
