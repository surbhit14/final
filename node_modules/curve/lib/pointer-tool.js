(function() {
  var PointerTool, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Utils = require('./Utils');

  module.exports = PointerTool = (function() {
    function PointerTool(svgDocument) {
      this.svgDocument = svgDocument;
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onMouseDown = bind(this.onMouseDown, this);
      this.onChangedSelectedObject = bind(this.onChangedSelectedObject, this);
      this._evrect = this.svgDocument.getSVGRoot().node.createSVGRect();
      this._evrect.width = this._evrect.height = 1;
      this.selectionModel = this.svgDocument.getSelectionModel();
      this.selectionView = this.svgDocument.getSelectionView();
      this.toolLayer = this.svgDocument.getToolLayer();
      this.objectEditor = this.svgDocument.getObjectEditor();
    }

    PointerTool.prototype.getType = function() {
      return 'pointer';
    };

    PointerTool.prototype.supportsType = function(type) {
      return type === 'pointer';
    };

    PointerTool.prototype.isActive = function() {
      return this.active;
    };

    PointerTool.prototype.activate = function() {
      var svg;
      this.objectEditor.activate();
      svg = this.svgDocument.getSVGRoot();
      svg.on('mousedown', this.onMouseDown);
      svg.on('mousemove', this.onMouseMove);
      this.changeSubscriptions = this.selectionModel.on('change:selected', this.onChangedSelectedObject);
      return this.active = true;
    };

    PointerTool.prototype.deactivate = function() {
      var ref, ref1, svg;
      this.objectEditor.deactivate();
      svg = this.svgDocument.getSVGRoot();
      svg.off('mousedown', this.onMouseDown);
      svg.off('mousemove', this.onMouseMove);
      if ((ref = this.selectionModel.getSelected()) != null) {
        if (typeof ref.disableDragging === "function") {
          ref.disableDragging();
        }
      }
      if ((ref1 = this.changeSubscriptions) != null) {
        ref1.dispose();
      }
      this.changeSubscriptions = null;
      return this.active = false;
    };

    PointerTool.prototype.onChangedSelectedObject = function(arg) {
      var object, old;
      object = arg.object, old = arg.old;
      if (old != null) {
        old.disableDragging();
      }
      if (object != null) {
        object.enableDragging(this._dragStartEvent);
      }
      return this._dragStartEvent = null;
    };

    PointerTool.prototype.onMouseDown = function(event) {
      var object;
      object = this._hitWithTarget(event);
      if (object != null) {
        this._dragStartEvent = event;
      }
      this.selectionModel.setSelected(object);
      this.selectionModel.setSelectedNode(null);
      if (object != null) {
        object.enableDragging(event);
      }
      return true;
    };

    PointerTool.prototype.onMouseMove = function(e) {
      return this.selectionModel.setPreselected(this._hitWithTarget(e));
    };

    PointerTool.prototype._hitWithTarget = function(e) {
      var obj;
      obj = null;
      if (e.target !== this.svgDocument.getSVGRoot().node) {
        obj = Utils.getObjectFromNode(e.target);
      }
      return obj;
    };

    PointerTool.prototype._hitWithIntersectionList = function(e) {
      var className, i, j, left, nodes, ref, svgNode, top;
      svgNode = this.svgDocument.getSVGRoot().node;
      top = svgNode.offsetTop;
      left = svgNode.offsetLeft;
      this._evrect.x = e.clientX - left;
      this._evrect.y = e.clientY - top;
      nodes = svgNode.getIntersectionList(this._evrect, null);
      if (nodes.length) {
        for (i = j = ref = nodes.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
          className = nodes[i].getAttribute('class');
          if (className && className.indexOf('invisible-to-hit-test') > -1) {
            continue;
          }
          return Utils.getObjectFromNode(nodes[i]);
        }
      }
      return null;
    };

    return PointerTool;

  })();

}).call(this);
