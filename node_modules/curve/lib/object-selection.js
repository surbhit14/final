(function() {
  var CompositeDisposable, ObjectSelection,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CompositeDisposable = require('event-kit').CompositeDisposable;

  module.exports = ObjectSelection = (function() {
    function ObjectSelection(svgDocument, options) {
      var base;
      this.svgDocument = svgDocument;
      this.options = options != null ? options : {};
      this.render = bind(this.render, this);
      if ((base = this.options)["class"] == null) {
        base["class"] = 'object-selection';
      }
    }

    ObjectSelection.prototype.setObject = function(object) {
      if (object === this.object) {
        return;
      }
      this._unbindObject();
      this.object = object;
      this._bindObject(this.object);
      if (this.trackingObject) {
        this.trackingObject.remove();
      }
      this.trackingObject = null;
      if (this.object) {
        this.trackingObject = this.object.cloneElement(this.svgDocument);
        this.trackingObject.node.setAttribute('class', this.options["class"] + ' invisible-to-hit-test');
        this.svgDocument.getToolLayer().add(this.trackingObject);
        this.trackingObject.back();
        this.render();
      }
    };

    ObjectSelection.prototype.render = function() {
      return this.object.render(this.trackingObject);
    };

    ObjectSelection.prototype._bindObject = function(object) {
      if (!object) {
        return;
      }
      this.selectedObjectSubscriptions = new CompositeDisposable;
      return this.selectedObjectSubscriptions.add(object.on('change', this.render));
    };

    ObjectSelection.prototype._unbindObject = function() {
      var ref;
      if ((ref = this.selectedObjectSubscriptions) != null) {
        ref.dispose();
      }
      return this.selectedObjectSubscriptions = null;
    };

    return ObjectSelection;

  })();

}).call(this);
