(function() {
  var CompositeDisposable, Node, Path, PenTool, getCanvasPosition,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CompositeDisposable = require('event-kit').CompositeDisposable;

  Node = require('./node');

  Path = require('./path');

  getCanvasPosition = require('./utils').getCanvasPosition;

  module.exports = PenTool = (function() {
    PenTool.prototype.currentObject = null;

    PenTool.prototype.currentNode = null;

    function PenTool(svgDocument) {
      this.svgDocument = svgDocument;
      this.onMouseUp = bind(this.onMouseUp, this);
      this.onMouseMove = bind(this.onMouseMove, this);
      this.onMouseDown = bind(this.onMouseDown, this);
      this.selectionModel = this.svgDocument.getSelectionModel();
      this.objectEditor = this.svgDocument.getObjectEditor();
    }

    PenTool.prototype.getType = function() {
      return 'pen';
    };

    PenTool.prototype.supportsType = function(type) {
      return type === 'pen';
    };

    PenTool.prototype.isActive = function() {
      return this.active;
    };

    PenTool.prototype.activate = function() {
      var svg;
      this.objectEditor.activate();
      this.subscriptions = new CompositeDisposable;
      this.subscriptions.add(this.objectEditor.editors.Path.on('mousedown:node', this.onMouseDownNode.bind(this)));
      svg = this.svgDocument.getSVGRoot();
      svg.on('mousedown', this.onMouseDown);
      svg.on('mousemove', this.onMouseMove);
      svg.on('mouseup', this.onMouseUp);
      return this.active = true;
    };

    PenTool.prototype.deactivate = function() {
      var ref, svg;
      this.objectEditor.deactivate();
      if ((ref = this.subscriptions) != null) {
        ref.dispose();
      }
      this._unsetCurrentObject();
      svg = this.svgDocument.getSVGRoot();
      svg.off('mousedown', this.onMouseDown);
      svg.off('mousemove', this.onMouseMove);
      svg.off('mouseup', this.onMouseUp);
      return this.active = false;
    };

    PenTool.prototype.onMouseDownNode = function(event) {
      var node, nodeIndex, path;
      node = event.node;
      path = this.selectionModel.getSelected();
      if (path != null) {
        nodeIndex = path.getNodes().indexOf(node);
        if (nodeIndex === 0) {
          path.close();
        }
        return this._unsetCurrentObject();
      }
    };

    PenTool.prototype.onMouseDown = function(event) {
      var position;
      if (!this.currentObject) {
        this.currentObject = new Path(this.svgDocument);
        this.currentObjectSubscriptions = new CompositeDisposable;
        this.currentObjectSubscriptions.add(this.currentObject.on('remove:node', this.onRemovedNode.bind(this)));
        this.selectionModel.setSelected(this.currentObject);
      }
      position = getCanvasPosition(this.svgDocument.getSVGRoot(), event);
      this.currentNode = new Node(position, [0, 0], [0, 0], true);
      this.currentObject.addNode(this.currentNode);
      return this.selectionModel.setSelectedNode(this.currentNode);
    };

    PenTool.prototype.onMouseMove = function(e) {
      var position;
      if (this.currentNode) {
        position = getCanvasPosition(this.svgDocument.getSVGRoot(), e);
        return this.currentNode.setAbsoluteHandleOut(position);
      }
    };

    PenTool.prototype.onMouseUp = function(e) {
      return this._unsetCurrentNode();
    };

    PenTool.prototype.onRemovedNode = function(arg) {
      var index, newNode, node, subpath;
      node = arg.node, subpath = arg.subpath, index = arg.index;
      if (node === this.currentNode) {
        this._unsetCurrentNode();
      }
      if (newNode = subpath.getNodes()[index - 1]) {
        return this.selectionModel.setSelectedNode(newNode);
      }
    };

    PenTool.prototype._unsetCurrentObject = function() {
      var ref;
      if ((ref = this.currentObjectSubscriptions) != null) {
        ref.dispose();
      }
      return this.currentObject = null;
    };

    PenTool.prototype._unsetCurrentNode = function() {
      return this.currentNode = null;
    };

    return PenTool;

  })();

}).call(this);
