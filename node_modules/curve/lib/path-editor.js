(function() {
  var CompositeDisposable, Delegator, Emitter, NodeEditor, ObjectSelection, PathEditor, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('event-kit'), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;

  Delegator = require('delegato');

  NodeEditor = require('./node-editor');

  ObjectSelection = require('./object-selection');

  module.exports = PathEditor = (function() {
    Delegator.includeInto(PathEditor);

    PathEditor.delegatesMethods('on', {
      toProperty: 'emitter'
    });

    function PathEditor(svgDocument) {
      this.svgDocument = svgDocument;
      this.onRemoveNode = bind(this.onRemoveNode, this);
      this.onInsertNode = bind(this.onInsertNode, this);
      this.emitter = new Emitter;
      this.path = null;
      this.node = null;
      this.nodeEditors = [];
      this._nodeEditorPool = [];
      this.objectSelection = new ObjectSelection(this.svgDocument);
      this.nodeEditorSubscriptions = new CompositeDisposable();
    }

    PathEditor.prototype.isActive = function() {
      return !!this.path;
    };

    PathEditor.prototype.getActiveObject = function() {
      return this.path;
    };

    PathEditor.prototype.activateObject = function(object) {
      this.deactivate();
      if (object != null) {
        this.path = object;
        this._bindToObject(this.path);
        this.objectSelection.setObject(object);
        return this._createNodeEditors(this.path);
      }
    };

    PathEditor.prototype.deactivate = function() {
      this.objectSelection.setObject(null);
      this.deactivateNode();
      this._unbindFromObject();
      this._removeNodeEditors();
      return this.path = null;
    };

    PathEditor.prototype.activateNode = function(node) {
      var nodeEditor;
      this.deactivateNode();
      if (node != null) {
        this.activeNode = node;
        nodeEditor = this._findNodeEditorForNode(node);
        if (nodeEditor != null) {
          return nodeEditor.setEnableHandles(true);
        }
      }
    };

    PathEditor.prototype.deactivateNode = function() {
      var nodeEditor;
      if (this.activeNode != null) {
        nodeEditor = this._findNodeEditorForNode(this.activeNode);
        if (nodeEditor != null) {
          nodeEditor.setEnableHandles(false);
        }
      }
      return this.activeNode = null;
    };

    PathEditor.prototype.onInsertNode = function(arg) {
      var index, node, ref1;
      ref1 = arg != null ? arg : {}, node = ref1.node, index = ref1.index;
      this._addNodeEditor(node);
      return null;
    };

    PathEditor.prototype.onRemoveNode = function(arg) {
      var index, node, ref1;
      ref1 = arg != null ? arg : {}, node = ref1.node, index = ref1.index;
      return this._removeNodeEditorForNode(node);
    };

    PathEditor.prototype._bindToObject = function(object) {
      if (!object) {
        return;
      }
      this.objectSubscriptions = new CompositeDisposable;
      this.objectSubscriptions.add(object.on('insert:node', this.onInsertNode));
      return this.objectSubscriptions.add(object.on('remove:node', this.onRemoveNode));
    };

    PathEditor.prototype._unbindFromObject = function() {
      var ref1;
      if ((ref1 = this.objectSubscriptions) != null) {
        ref1.dispose();
      }
      return this.objectSubscriptions = null;
    };

    PathEditor.prototype._removeNodeEditorForNode = function(node) {
      var editorIndex, nodeEditor;
      nodeEditor = this._findNodeEditorForNode(node);
      if (nodeEditor != null) {
        nodeEditor.setNode(null);
        editorIndex = this.nodeEditors.indexOf(nodeEditor);
        this.nodeEditors.splice(editorIndex, 1);
        return this._nodeEditorPool.push(nodeEditor);
      }
    };

    PathEditor.prototype._removeNodeEditors = function() {
      var i, len, nodeEditor, ref1;
      this._nodeEditorPool = this._nodeEditorPool.concat(this.nodeEditors);
      this.nodeEditors = [];
      ref1 = this._nodeEditorPool;
      for (i = 0, len = ref1.length; i < len; i++) {
        nodeEditor = ref1[i];
        nodeEditor.setNode(null);
      }
    };

    PathEditor.prototype._createNodeEditors = function(object) {
      var i, len, node, nodes;
      this._removeNodeEditors();
      if ((object != null ? object.getNodes : void 0) != null) {
        nodes = object.getNodes();
        for (i = 0, len = nodes.length; i < len; i++) {
          node = nodes[i];
          this._addNodeEditor(node);
        }
      }
    };

    PathEditor.prototype._addNodeEditor = function(node) {
      var nodeEditor;
      if (!node) {
        return false;
      }
      if (this._nodeEditorPool.length) {
        nodeEditor = this._nodeEditorPool.pop();
      } else {
        nodeEditor = new NodeEditor(this.svgDocument, this);
        this.nodeEditorSubscriptions.add(nodeEditor.on('mousedown:node', this._forwardEvent.bind(this, 'mousedown:node')));
      }
      nodeEditor.setNode(node);
      this.nodeEditors.push(nodeEditor);
      return true;
    };

    PathEditor.prototype._findNodeEditorForNode = function(node) {
      var i, len, nodeEditor, ref1;
      ref1 = this.nodeEditors;
      for (i = 0, len = ref1.length; i < len; i++) {
        nodeEditor = ref1[i];
        if (nodeEditor.node === node) {
          return nodeEditor;
        }
      }
      return null;
    };

    PathEditor.prototype._forwardEvent = function(eventName, args) {
      var path;
      if (!(path = this.getActiveObject())) {
        return;
      }
      args.object = path;
      return this.emitter.emit(eventName, args);
    };

    return PathEditor;

  })();

}).call(this);
