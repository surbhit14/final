(function() {
  var Point, Size, Utils, getObjectMap;

  Point = require("./point");

  Size = require("./size");

  getObjectMap = function() {
    var g;
    g = typeof global !== "undefined" && global !== null ? global : window;
    if (g.NodeObjectMap == null) {
      g.NodeObjectMap = {};
    }
    return g.NodeObjectMap;
  };

  Utils = {
    getObjectFromNode: function(domNode) {
      return getObjectMap()[domNode.id];
    },
    setObjectOnNode: function(domNode, object) {
      return getObjectMap()[domNode.id] = object;
    },
    getCanvasPosition: function(svgRoot, event) {
      var x, y;
      if ((event.offsetX != null) && (event.offsetY != null)) {
        x = event.offsetX;
        y = event.offsetY;
      } else {
        x = event.pageX - svgRoot.node.offsetLeft;
        y = event.pageY - svgRoot.node.offsetTop;
      }
      return new Point(x, y);
    },
    normalizePositionAndSize: function(anchor, point, constrain) {
      var bottomRight, diff, diffX, diffY, minVal, topLeft;
      if (constrain) {
        diffX = point.x - anchor.x;
        diffY = point.y - anchor.y;
        minVal = Math.min(Math.abs(diffX), Math.abs(diffY));
        diffX = diffX / Math.abs(diffX) * minVal;
        diffY = diffY / Math.abs(diffY) * minVal;
        point = new Point(anchor.x + diffX, anchor.y + diffY);
      }
      topLeft = new Point(Math.min(anchor.x, point.x), Math.min(anchor.y, point.y));
      bottomRight = new Point(Math.max(anchor.x, point.x), Math.max(anchor.y, point.y));
      diff = bottomRight.subtract(topLeft);
      return {
        position: topLeft,
        size: new Size(diff.x, diff.y)
      };
    }
  };

  module.exports = Utils;

}).call(this);
