(function() {
  var CompositeDisposable, Emitter, Point, SVGDocumentModel, Size, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  ref = require('event-kit'), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;

  Size = require("./size");

  Point = require("./point");

  module.exports = SVGDocumentModel = (function() {
    function SVGDocumentModel() {
      this.onRemovedObject = bind(this.onRemovedObject, this);
      this.onChangedObject = bind(this.onChangedObject, this);
      this.emitter = new Emitter;
      this.reset();
    }

    SVGDocumentModel.prototype.reset = function() {
      var ref1;
      this.objects = [];
      if ((ref1 = this.objectSubscriptions) != null) {
        ref1.dispose();
      }
      this.objectSubscriptions = new CompositeDisposable;
      return this.objectSubscriptionsByObject = {};
    };

    SVGDocumentModel.prototype.on = function() {
      var args, ref1;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = this.emitter).on.apply(ref1, args);
    };

    SVGDocumentModel.prototype.setObjects = function(objects) {
      var i, len, object, options;
      this.reset();
      options = {
        silent: true
      };
      for (i = 0, len = objects.length; i < len; i++) {
        object = objects[i];
        this.registerObject(object, options);
      }
    };

    SVGDocumentModel.prototype.getObjects = function() {
      return this.objects;
    };

    SVGDocumentModel.prototype.registerObject = function(object, options) {
      var ref1, subscriptions;
      this.objectSubscriptionsByObject[object.getID()] = subscriptions = new CompositeDisposable;
      subscriptions.add(object.on('change', this.onChangedObject));
      subscriptions.add(object.on('remove', this.onRemovedObject));
      this.objectSubscriptions.add(subscriptions);
      this.objects.push(object);
      if (!((ref1 = this.options) != null ? ref1.silent : void 0)) {
        return this.emitter.emit('change');
      }
    };

    SVGDocumentModel.prototype.setSize = function(w, h) {
      var size;
      size = Size.create(w, h);
      if (size.equals(this.size)) {
        return;
      }
      this.size = size;
      return this.emitter.emit('change:size', {
        size: size
      });
    };

    SVGDocumentModel.prototype.getSize = function() {
      return this.size;
    };

    SVGDocumentModel.prototype.onChangedObject = function(event) {
      return this.emitter.emit('change', event);
    };

    SVGDocumentModel.prototype.onRemovedObject = function(event) {
      var index, object, subscription;
      object = event.object;
      subscription = this.objectSubscriptionsByObject[object.getID()];
      delete this.objectSubscriptionsByObject[object.getID()];
      if (subscription != null) {
        subscription.dispose();
        this.objectSubscriptions.remove(subscription);
      }
      index = this.objects.indexOf(object);
      if (index > -1) {
        this.objects.splice(index, 1);
      }
      return this.emitter.emit('change', event);
    };

    return SVGDocumentModel;

  })();

}).call(this);
