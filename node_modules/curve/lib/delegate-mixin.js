(function() {
  var Draggable, Mixin,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Mixin = require('mixto');

  module.exports = Draggable = (function(superClass) {
    extend(Draggable, superClass);

    function Draggable() {
      return Draggable.__super__.constructor.apply(this, arguments);
    }

    Draggable.prototype.enableDragging = function(startEvent) {
      var element;
      if (this._draggingEnabled) {
        return;
      }
      element = this.svgEl;
      if (element == null) {
        return;
      }
      element.draggable(startEvent);
      element.dragmove = (function(_this) {
        return function() {
          return _this.updateFromAttributes();
        };
      })(this);
      element.dragend = (function(_this) {
        return function(event) {
          _this.model.setTransformString(null);
          return _this.model.translate([event.x, event.y]);
        };
      })(this);
      return this._draggingEnabled = true;
    };

    Draggable.prototype.disableDragging = function() {
      var element;
      if (!this._draggingEnabled) {
        return;
      }
      element = this.svgEl;
      if (element == null) {
        return;
      }
      if (typeof element.fixed === "function") {
        element.fixed();
      }
      element.dragstart = null;
      element.dragmove = null;
      element.dragend = null;
      return this._draggingEnabled = false;
    };

    return Draggable;

  })(Mixin);

}).call(this);
