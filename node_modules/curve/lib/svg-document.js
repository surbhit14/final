(function() {
  var DeserializeSVG, Emitter, ObjectEditor, PenTool, Point, PointerTool, SVG, SVGDocument, SVGDocumentModel, SelectionModel, SelectionView, SerializeSVG, ShapeTool, Size,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  Emitter = require('event-kit').Emitter;

  SVG = require('../vendor/svg');

  SelectionModel = require("./selection-model");

  SelectionView = require("./selection-view");

  PenTool = require("./pen-tool");

  PointerTool = require("./pointer-tool");

  ShapeTool = require("./shape-tool");

  SerializeSVG = require("./serialize-svg");

  DeserializeSVG = require("./deserialize-svg");

  Size = require("./size");

  Point = require("./point");

  ObjectEditor = require('./object-editor');

  SVGDocumentModel = require("./svg-document-model");

  module.exports = SVGDocument = (function() {
    function SVGDocument(rootNode) {
      this.onChangedSize = bind(this.onChangedSize, this);
      this.emitter = new Emitter;
      this.model = new SVGDocumentModel;
      this.svg = SVG(rootNode);
      this.toolLayer = this.svg.group();
      this.toolLayer.node.setAttribute('class', 'tool-layer');
      this.selectionModel = new SelectionModel();
      this.selectionView = new SelectionView(this);
      this.objectEditor = new ObjectEditor(this);
      this.model.on('change:size', this.onChangedSize);
      this.model.on('change', (function(_this) {
        return function(event) {
          return _this.emitter.emit('change', event);
        };
      })(this));
      this.model.on('change:size', (function(_this) {
        return function(event) {
          return _this.emitter.emit('change:size', event);
        };
      })(this));
    }

    SVGDocument.prototype.on = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.emitter).on.apply(ref, args);
    };

    SVGDocument.prototype.initializeTools = function() {
      var i, len, ref, tool;
      this.tools = [new PointerTool(this), new PenTool(this), new ShapeTool(this)];
      ref = this.tools;
      for (i = 0, len = ref.length; i < len; i++) {
        tool = ref[i];
        if (typeof tool.on === "function") {
          tool.on('cancel', (function(_this) {
            return function() {
              return _this.setActiveToolType('pointer');
            };
          })(this));
        }
      }
      return this.setActiveToolType('pointer');
    };


    /*
    Section: File Serialization
     */

    SVGDocument.prototype.deserialize = function(svgString) {
      var objectLayer;
      this.model.setObjects(DeserializeSVG(this, svgString));
      objectLayer = null;
      this.svg.each(function() {
        if (this.node.nodeName === 'svg') {
          return objectLayer = this;
        }
      });
      this.objectLayer = objectLayer;
      if (objectLayer == null) {
        objectLayer = this.getObjectLayer();
      }
      this.model.setSize(new Size(objectLayer.width(), objectLayer.height()));
      this.toolLayer.front();
    };

    SVGDocument.prototype.serialize = function() {
      var svgRoot;
      svgRoot = this.getObjectLayer();
      if (svgRoot) {
        return SerializeSVG(svgRoot, {
          whitespace: true
        });
      } else {
        return '';
      }
    };


    /*
    Section: Tool Management
     */

    SVGDocument.prototype.toolForType = function(toolType) {
      var i, len, ref, tool;
      ref = this.tools;
      for (i = 0, len = ref.length; i < len; i++) {
        tool = ref[i];
        if (tool.supportsType(toolType)) {
          return tool;
        }
      }
      return null;
    };

    SVGDocument.prototype.getActiveTool = function() {
      var i, len, ref, tool;
      ref = this.tools;
      for (i = 0, len = ref.length; i < len; i++) {
        tool = ref[i];
        if (tool.isActive()) {
          return tool;
        }
      }
      return null;
    };

    SVGDocument.prototype.getActiveToolType = function() {
      var ref;
      return (ref = this.getActiveTool()) != null ? ref.getType() : void 0;
    };

    SVGDocument.prototype.setActiveToolType = function(toolType) {
      var newTool, oldActiveTool, oldActiveToolType;
      oldActiveTool = this.getActiveTool();
      oldActiveToolType = oldActiveTool != null ? oldActiveTool.getType() : void 0;
      newTool = this.toolForType(toolType);
      if ((newTool != null) && toolType !== oldActiveToolType) {
        if (oldActiveTool != null) {
          oldActiveTool.deactivate();
        }
        newTool.activate(toolType);
        return this.emitter.emit('change:tool', {
          toolType: toolType
        });
      }
    };


    /*
    Section: Selections
     */

    SVGDocument.prototype.getSelectionModel = function() {
      return this.selectionModel;
    };

    SVGDocument.prototype.getSelectionView = function() {
      return this.selectionView;
    };


    /*
    Section: SVG Details
     */

    SVGDocument.prototype.getSVGRoot = function() {
      return this.svg;
    };

    SVGDocument.prototype.getToolLayer = function() {
      return this.toolLayer;
    };

    SVGDocument.prototype.getObjectLayer = function() {
      if (this.objectLayer == null) {
        this.objectLayer = this._createObjectLayer();
      }
      return this.objectLayer;
    };


    /*
    Section: Document Details
     */

    SVGDocument.prototype.setSize = function(w, h) {
      return this.model.setSize(w, h);
    };

    SVGDocument.prototype.getSize = function() {
      return this.model.getSize();
    };

    SVGDocument.prototype.getObjects = function() {
      return this.model.getObjects();
    };

    SVGDocument.prototype.getObjectEditor = function() {
      return this.objectEditor;
    };


    /*
    Section: Event Handlers
     */

    SVGDocument.prototype.onChangedSize = function(arg) {
      var root, size;
      size = arg.size;
      root = this.getObjectLayer();
      root.width(size.width);
      return root.height(size.height);
    };


    /*
    Section: Acting on selected elements
     */

    SVGDocument.prototype.translateSelectedObjects = function(deltaPoint) {
      var selectedNode, selectedObject;
      if (!deltaPoint) {
        return;
      }
      deltaPoint = Point.create(deltaPoint);
      if (selectedNode = this.selectionModel.getSelectedNode()) {
        return selectedNode != null ? typeof selectedNode.translate === "function" ? selectedNode.translate(deltaPoint) : void 0 : void 0;
      } else if (selectedObject = this.selectionModel.getSelected()) {
        return selectedObject != null ? typeof selectedObject.translate === "function" ? selectedObject.translate(deltaPoint) : void 0 : void 0;
      }
    };

    SVGDocument.prototype.removeSelectedObjects = function() {
      var selectedNode, selectedObject;
      selectedObject = this.selectionModel.getSelected();
      if (selectedObject && (selectedNode = this.selectionModel.getSelectedNode())) {
        return typeof selectedObject.removeNode === "function" ? selectedObject.removeNode(selectedNode) : void 0;
      } else {
        return selectedObject != null ? selectedObject.remove() : void 0;
      }
    };

    SVGDocument.prototype.registerObject = function(object) {
      return this.model.registerObject(object);
    };

    SVGDocument.prototype._createObjectLayer = function() {
      this.objectLayer = this.svg.nested();
      this.setSize(1024, 1024);
      return this.objectLayer.back();
    };

    return SVGDocument;

  })();

}).call(this);
